scripts:

  build-driver:
    - script: setup-driver
    - script: upload-benchmark

  start-driver:
    - script: run-hf-benchmark

  cleanup-driver:
    - js: ${{HF_REPORT_ALL_ENABLED}}
      then:
        - log: saving hyperfoil all.json as state
        - sh: cat ${{HF_TMP_DIR:/tmp/hyperfoil}}/run/${{RUN.HF_RUN_ID}}/all.json
          silent: true
          then:
            - js: |
                (input, state) => { 
                  let { agents, connections, sessions, ...result_stripped } = input
                  state.HF_REPORT_ALL = result_stripped
                }
    - sh:
        command: rm -rf ${{HF_REPORT_FILE}} ${{HF_BENCHMARK_REF}}
        ignore-exit-code: true

  setup-driver:
    - sh:
        command: if [ -f ${{HF_TMP_DIR:/tmp/hyperfoil}}/hyperfoil.local.log ]; then rm -f ${{HF_TMP_DIR:/tmp/hyperfoil}}/hyperfoil.local.log; fi
        ignore-exit-code: true

  upload-benchmark:
    - sh: if [ -d ${{HF_LOCAL_DIR}} ]; then rm -rf ${{HF_LOCAL_DIR}}; fi
    - sh: mkdir -p ${{HF_LOCAL_DIR}}
    - upload: ${{ENV.SCRIPT_DIR}}/${{HF_BENCHMARK_NAME}}/${{HF_BENCHMARK_NAME}}${{HF_BENCHMARK_EXTENSION}} ${{HF_LOCAL_DIR}}/

  run-hf-benchmark:
    - queue-download: ${{HF_REPORT_FILE}}
    - queue-download: ${{HF_BENCHMARK_REF}}
    # wait for the SUT application to be ready
    - wait-for: APP_READY
    - log: running Hyperfoil benchmark..
    - sh: jbang run@hyperfoil -o ${{HF_REPORT_FILE}} ${{HF_BENCHMARK_REF}} ${{HF_BENCHMARK_PARAMS:}}
      watch:
        - regex:
            pattern: Started run (?<RUN.HF_RUN_ID>.*{4})
            autoConvert: false
          then:
            - signal: HF_BENCHMARK_STARTED
      then:
        - queue-download: ${{HF_TMP_DIR:/tmp/hyperfoil}}/run/${{HF_RUN_ID}}/all.json
        - queue-download: ${{HF_TMP_DIR:/tmp/hyperfoil}}/hyperfoil.local.log
    - signal: HF_BENCHMARK_TERMINATED

states:
  HF_BENCHMARK_EXTENSION: .hf.yaml
  # name of the benchmark, e.g. hello, assuming the folder has the same name and the benchmark is <name>.hf.yaml
  # full path relative to this folder is ./<NAME>/<NAME>.hf.yaml, e.g., ./hello/hello.hf.yaml
  HF_BENCHMARK_NAME:
  # path to the report generated file, e.g., /tmp/report.html
  HF_REPORT_FILE: /tmp/report.html
  HF_RUN_ID:
  HF_LOCAL_DIR: /tmp/hf-benchmarks
  HF_BENCHMARK_REF: ${{HF_LOCAL_DIR}}/${{HF_BENCHMARK_NAME}}${{HF_BENCHMARK_EXTENSION}}

  # additional benchmark template params you want to provide, e.g., -PDURATION=20s -P.....
  HF_BENCHMARK_PARAMS:

  # if true HF_REPORT_ALL will be populated with the actual all.json content from hyperfoil
  HF_REPORT_ALL_ENABLED: true
  HF_REPORT_ALL:

  # name of the steady phase in hyperfoil
  HF_STEADY_PHASE_NAME: performFight